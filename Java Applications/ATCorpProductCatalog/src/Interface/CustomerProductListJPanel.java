/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Product;
import Business.ProductCatalog;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Lenovo
 */
public class CustomerProductListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerProductListJPanel
     */
    
    private JPanel userProcessContainer;
    private ProductCatalog productCatalog;
    private String productTypeSent;

    CustomerProductListJPanel(JPanel userProcessContainer, ProductCatalog productCatalog, String productTypeSent) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.productCatalog = productCatalog;
        this.productTypeSent = productTypeSent;
        populateCustomerTable();
    }
    
    public void populateCustomerTable(){
        DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
        defaultTable.setRowCount(0);
        
        if(productTypeSent.equalsIgnoreCase("Computer")){
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getProductType().equalsIgnoreCase("Computer")){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
        }
        
        if(productTypeSent.equalsIgnoreCase("Printer")){
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getProductType().equalsIgnoreCase("Printer")){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
        }
        
        if(productTypeSent.equalsIgnoreCase("HardwareParts")){
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getProductType().equalsIgnoreCase("HardwareParts")){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
        }
        
        if(productTypeSent.equalsIgnoreCase("SoftwareProducts")){
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getProductType().equalsIgnoreCase("SoftwareProducts")){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        customerProductTable = new javax.swing.JTable();
        customerViewBtn = new javax.swing.JButton();
        backCatalogBtn = new javax.swing.JButton();
        searchByNameBtn = new javax.swing.JButton();
        searchNameTextField = new javax.swing.JTextField();
        searchByProdIDBtn = new javax.swing.JButton();
        searchProdIDTextField = new javax.swing.JTextField();
        searchByVendorBtn = new javax.swing.JButton();
        searchByVendorTextField = new javax.swing.JTextField();
        resetSearchTableBtn = new javax.swing.JButton();
        searchByProdDescBtn = new javax.swing.JButton();
        searchKeywordTextField = new javax.swing.JTextField();
        sortByBasePriceBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchBrandComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(153, 255, 153));

        customerProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Product Type", "Product Name", "Base Price"
            }
        ));
        jScrollPane3.setViewportView(customerProductTable);

        jScrollPane2.setViewportView(jScrollPane3);

        customerViewBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        customerViewBtn.setText("View Details of Selected Product");
        customerViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerViewBtnActionPerformed(evt);
            }
        });

        backCatalogBtn.setText("<<Back");
        backCatalogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backCatalogBtnActionPerformed(evt);
            }
        });

        searchByNameBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchByNameBtn.setText("Search by Product Name");
        searchByNameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameBtnActionPerformed(evt);
            }
        });

        searchNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNameTextFieldActionPerformed(evt);
            }
        });

        searchByProdIDBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchByProdIDBtn.setText("Search By Product ID");
        searchByProdIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByProdIDBtnActionPerformed(evt);
            }
        });

        searchByVendorBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchByVendorBtn.setText("Search by Vendor Name");
        searchByVendorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByVendorBtnActionPerformed(evt);
            }
        });

        resetSearchTableBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetSearchTableBtn.setText("Clear Search Results");
        resetSearchTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSearchTableBtnActionPerformed(evt);
            }
        });

        searchByProdDescBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchByProdDescBtn.setText("Search By Keywords in Product Description");
        searchByProdDescBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByProdDescBtnActionPerformed(evt);
            }
        });

        searchKeywordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchKeywordTextFieldActionPerformed(evt);
            }
        });

        sortByBasePriceBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sortByBasePriceBtn.setText("Sort By Lowest Price");
        sortByBasePriceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByBasePriceBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Product List");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Search Options");

        searchBrandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Brand", "Dell", "HP", "Canon", "Apple" }));
        searchBrandComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBrandComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerViewBtn)
                                    .addComponent(sortByBasePriceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchByNameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchByProdIDBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchByVendorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchByProdDescBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchKeywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchByVendorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchBrandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(searchProdIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(backCatalogBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(resetSearchTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(160, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(customerViewBtn)
                        .addGap(53, 53, 53)
                        .addComponent(sortByBasePriceBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByNameBtn)
                    .addComponent(searchNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByProdIDBtn)
                    .addComponent(searchProdIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByVendorBtn)
                    .addComponent(searchByVendorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBrandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByProdDescBtn)
                    .addComponent(searchKeywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(resetSearchTableBtn)
                .addGap(9, 9, 9)
                .addComponent(backCatalogBtn)
                .addContainerGap(325, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customerViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerViewBtnActionPerformed
        int selectedRow = customerProductTable.getSelectedRow();
        
        if(selectedRow>=0){
            Product product = (Product)customerProductTable.getValueAt(selectedRow, 0);
            CustomerViewProductJPanel customerViewProduct = new CustomerViewProductJPanel(userProcessContainer,product);
            userProcessContainer.add("CustomerViewProductJPanel", customerViewProduct);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        
        else{
            JOptionPane.showMessageDialog(null, "Please select a row from the table");
        }
    }//GEN-LAST:event_customerViewBtnActionPerformed

    private void backCatalogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backCatalogBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backCatalogBtnActionPerformed

    private void searchNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchNameTextFieldActionPerformed

    private void searchByNameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameBtnActionPerformed
       
       if(searchNameTextField.getText().equals(""))
       {
           getToolkit().beep();
           JOptionPane.showMessageDialog(null, "Please Enter a Valid Product Name");
       } 
       else{
        Product value = productCatalog.searchByName(searchNameTextField.getText());   
        if (value == null){
            
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Product with this name does not exist" , "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        else{
            CustomerViewProductJPanel customerViewProduct = new CustomerViewProductJPanel(userProcessContainer,value);
            userProcessContainer.add("CustomerViewProductJPanel", customerViewProduct);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
       }
       
        
        
       
       
       
    }//GEN-LAST:event_searchByNameBtnActionPerformed

    private void searchByProdIDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByProdIDBtnActionPerformed
        if(searchProdIDTextField.getText().equals(""))
       {
           getToolkit().beep();
           JOptionPane.showMessageDialog(null, "Please Enter a Valid Product ID");
       } 
        else
        {
        Product value = productCatalog.searchByProductID(searchProdIDTextField.getText());
        if (value == null){
            
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Product with this ID does not exist" , "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        
        else{
            CustomerViewProductJPanel customerViewProduct = new CustomerViewProductJPanel(userProcessContainer,value);
            userProcessContainer.add("CustomerViewProductJPanel", customerViewProduct);
            CardLayout layout = (CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            }
        }
    }//GEN-LAST:event_searchByProdIDBtnActionPerformed

    private void searchByVendorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByVendorBtnActionPerformed
        String searchedVendor = searchByVendorTextField.getText();
        if (searchedVendor.equalsIgnoreCase("Dell"))
        {
            DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
            defaultTable.setRowCount(0);
            
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getVendorName().equalsIgnoreCase("Dell")&&product.getProductType().equalsIgnoreCase(productTypeSent)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
            
            if(defaultTable.getRowCount()==0){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "No Products Available");
            }

        }
        
        if (searchedVendor.equalsIgnoreCase("HP"))
        {
            DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
            defaultTable.setRowCount(0);
            
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getVendorName().equalsIgnoreCase("HP")&&product.getProductType().equalsIgnoreCase(productTypeSent)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
            
            if(defaultTable.getRowCount()==0){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "No Products Available");
            }

        }
        if (searchedVendor.equalsIgnoreCase("Canon"))
        {
            DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
            defaultTable.setRowCount(0);
            
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getVendorName().equalsIgnoreCase("Canon")&&product.getProductType().equalsIgnoreCase(productTypeSent)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
            
            if(defaultTable.getRowCount()==0){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "No Products Available");
            }

        }
        
        if (searchedVendor.equalsIgnoreCase("Apple"))
        {
            DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
            defaultTable.setRowCount(0);
            
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getVendorName().equalsIgnoreCase("Apple")&&product.getProductType().equalsIgnoreCase(productTypeSent)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
            
            if(defaultTable.getRowCount()==0){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "No Products Available");
            }

        }
        if(!(searchedVendor.equalsIgnoreCase("Apple")||(searchedVendor.equalsIgnoreCase("Dell")) ||(searchedVendor.equalsIgnoreCase("HP"))||(searchedVendor.equalsIgnoreCase("Canon")) )){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "No items found. Please check the Vendor Name Entered");
        }
        
        
    }//GEN-LAST:event_searchByVendorBtnActionPerformed

    private void resetSearchTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSearchTableBtnActionPerformed
        populateCustomerTable();
        searchProdIDTextField.setText("");
        searchNameTextField.setText("");
        //searchByVendorTextField.setText("");
        searchKeywordTextField.setText("");
        searchBrandComboBox.setSelectedIndex(0);
        searchByVendorTextField.setText("");
    }//GEN-LAST:event_resetSearchTableBtnActionPerformed

    private void searchByProdDescBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByProdDescBtnActionPerformed
        if(searchKeywordTextField.getText().equals(""))
            {
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "Please Enter Valid Keywords");
            } 
        else{
            
            String searchedDes = searchKeywordTextField.getText();
            DefaultTableModel defaultTable = (DefaultTableModel)customerProductTable.getModel();
            defaultTable.setRowCount(0);
            
            for(Product product : productCatalog.getProductCatalog())
            {
                if(product.getProductDescription().toLowerCase().contains(searchedDes.toLowerCase())&&product.getProductType().equalsIgnoreCase(productTypeSent)){
                    Object row[] = new Object[4];
                    row[0] = product;
                    row[1] = product.getProductType();
                    row[2] = product.getProductName();
                    row[3] = product.getBasePrice();
                    
                    defaultTable.addRow(row);
                }
            }
            
            if(defaultTable.getRowCount()==0){
                getToolkit().beep();
                JOptionPane.showMessageDialog(null, "No Products Available");
            }
            
        }

        
    }//GEN-LAST:event_searchByProdDescBtnActionPerformed

    private void sortByBasePriceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByBasePriceBtnActionPerformed
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(customerProductTable.getModel());
            
            sorter.setComparator(3, new Comparator<Float>() {
 
            @Override
            public int compare(Float name1, Float name2) {
                return name1.compareTo(name2);
                }
               });
 
        
            customerProductTable.setRowSorter(sorter);
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
 
            sorter.setSortKeys(sortKeys);
            sorter.sort();
   
    }//GEN-LAST:event_sortByBasePriceBtnActionPerformed

    private void searchBrandComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBrandComboBoxActionPerformed
        searchByVendorTextField.setText(searchBrandComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_searchBrandComboBoxActionPerformed

    private void searchKeywordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchKeywordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchKeywordTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backCatalogBtn;
    private javax.swing.JTable customerProductTable;
    private javax.swing.JButton customerViewBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton resetSearchTableBtn;
    private javax.swing.JComboBox<String> searchBrandComboBox;
    private javax.swing.JButton searchByNameBtn;
    private javax.swing.JButton searchByProdDescBtn;
    private javax.swing.JButton searchByProdIDBtn;
    private javax.swing.JButton searchByVendorBtn;
    private javax.swing.JTextField searchByVendorTextField;
    private javax.swing.JTextField searchKeywordTextField;
    private javax.swing.JTextField searchNameTextField;
    private javax.swing.JTextField searchProdIDTextField;
    private javax.swing.JButton sortByBasePriceBtn;
    // End of variables declaration//GEN-END:variables
}
